<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Charlie&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/89d2bad56dd7684e0f4c1d52b4489de3</icon>
  <subtitle>Move fast and Break things!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chalypeng.com/"/>
  <updated>2018-06-25T03:13:02.978Z</updated>
  <id>https://chalypeng.com/</id>
  
  <author>
    <name>chalypeng</name>
    <email>chalypeng#gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>德鲁克谈《自我管理》—《哈佛商业评论》史上最受欢迎的文章</title>
    <link href="https://chalypeng.com/2018/06/25/Managin-Oneself/"/>
    <id>https://chalypeng.com/2018/06/25/Managin-Oneself/</id>
    <published>2018-06-25T01:48:42.000Z</published>
    <updated>2018-06-25T03:13:02.978Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《管理自己》，洋文叫做《 Managing Oneself 》。此文刊登在十年前（2008）的《哈佛商业评论》（HBR）上，号称是 HBR“有屎以来”（创刊后）重印次数最多的文章。 &lt;/p&gt;
&lt;p&gt;这篇《 Managing Oneself 》实际上是摘自“&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BD%BC%E5%BE%97%C2%B7%E5%BE%B7%E9%B2%81%E5%85%8B&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;彼得·德鲁克&lt;/a&gt;”（&lt;a href=&quot;https://en.wikipedia.org/wiki/Peter_Drucker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Peter F. Drucker&lt;/a&gt;）1999年出版的《&lt;strong&gt;21世纪的管理挑战&lt;/strong&gt;》一书的第6章（也是最后一章）。 &lt;/p&gt;
&lt;p&gt;为啥分享此文？因为【&lt;strong&gt;这篇长文对每个人都很有帮助&lt;/strong&gt;】。通过此文的借鉴，可以帮助你更好地规划自己的职业生涯和人生。 &lt;/p&gt;
&lt;h2 id=&quot;★0、前言&quot;&gt;&lt;a href=&quot;#★0、前言&quot; class=&quot;headerlink&quot; title=&quot;★0、前言&quot;&gt;&lt;/a&gt;★0、前言&lt;/h2&gt;&lt;p&gt;　　我们生活的这个时代充满着前所未有的机会：如果你有雄心，又不乏智慧，那么不管你从何处起步，你都可以沿着自己所选择的道路登上事业的顶峰。 &lt;/p&gt;
&lt;p&gt;　　不过，有了机会，也就有了责任。今天的公司并不怎么管员工的职业发展；实际上，知识工作者必须成为自己的首席执行官。你应该在公司中开辟自己的天地，知道何时改变发展道路，并在可能长达50年的职业生涯中不断努力、干出实绩。要做好这些事情，你首先要对自己有深刻的认识——不仅清楚自己的优点和缺点，也知道自己是怎样学习新知识和与别人共事的，并且还明白自己的价值观是什么、自己又能在哪些方面做出最大贡献。因为只有当所有工作都从自己的长处着眼，你才能真正做到卓尔不群。 &lt;/p&gt;
&lt;p&gt;　　历史上的伟人——拿破仑、达芬奇、莫扎特——都很善于自我管理。这在很大程度上也是他们成为伟人的原因。不过，他们属于不可多得的奇才，不但有着不同于常人的天资，而且天生就会管理自己，因而才取得了不同于常人的成就。&lt;strong&gt;而我们当中的大多数人，甚至包括那些还算有点天赋的人，都不得不通过学习来掌握自我管理的技巧。&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;　　我们必须学会自我发展，必须知道把自己放在什么样的位置上，才能做出最大的贡献，而且还必须在长达50年的职业生涯中保持着高度的警觉和投入——也就是说，我们得知道自己应该何时换工作，以及该怎么换。 &lt;/p&gt;
&lt;h2 id=&quot;★1、我的长处是什么？&quot;&gt;&lt;a href=&quot;#★1、我的长处是什么？&quot; class=&quot;headerlink&quot; title=&quot;★1、我的长处是什么？　　&quot;&gt;&lt;/a&gt;★1、我的长处是什么？　　&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;多数人都以为他们知道自己擅长什么，其实不然！&lt;/strong&gt;更多的情况是，人们只知道自己不擅长什么——即便是在这一点上，人们也往往认识不清。然而，一个人要有所作为，只能靠发挥自己的长处，而如果从事自己不太擅长的工作是无法取得成就的，更不用说那些自己根本干不了的事情。 &lt;/p&gt;
&lt;p&gt;　　以前的人没有什么必要去了解自己的长处，因为一个人的出身就决定了他一生的地位和职业：农民的儿子也会当农民，工匠的女儿会嫁给另一个工匠等。但是，现在人们有了选择。我们需要知己所长，才能知己所属。　　&lt;/p&gt;
&lt;p&gt;​    &lt;strong&gt;要发现自己的长处，唯一途径就是回馈分析法（feedback analysis）&lt;/strong&gt;。每当做出重要决定或采取重要行动时，你都可以事先记录下自己对结果的预期。9到12个月后，再将实际结果与自己的预期比较。我本人采用这种方法已有15到20年了，而每次使用都有意外的收获。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p9mx37hiy.bkt.clouddn.com/blog/180625/7mLGD8g02i.png?imageslim&quot; alt=&quot;不见图 请翻墙&quot;&gt;&lt;/p&gt;
&lt;p&gt;　　比如，回馈分析法使我看到，我对专业技术人员，不管是工程师、会计师还是市场研究人员，都容易从直觉上去理解他们。这令我大感意外。它还使我看到，我其实与那些涉猎广泛的通才没有什么共鸣。 &lt;/p&gt;
&lt;p&gt;　　回馈分析法并不是什么新鲜的东西。早在14世纪，这种方法由一个原本会永远默默无闻的德国神学家发明，大约150年后被法国神学家约翰·加尔文和西班牙神学家圣依纳爵分别采用。他们都把这种方法用于其信徒的修行。事实上，回馈分析法使他们的信徒养成了一种始终注重实际表现和结果的习惯，这也是他们创立的教派——加尔文教会和耶稣会——能够主宰欧洲长达30年的原因。　　&lt;/p&gt;
&lt;p&gt;​    &lt;strong&gt;&lt;strong&gt;我们只要持之以恒地运用这个简单的方法，就能在较短的时间内（可能两三年），发现自己的长处——这是你需要知道的最重要的事情。&lt;/strong&gt;&lt;/strong&gt; 在采用这种方法之后，你就能知道，自己正在做（或没有做）的哪些事情会让你的长处无法发挥出来。同时，你也将看到自己在哪些方面能力不是特别强。最后，你还将了解到自己在哪些方面完全不擅长，做不出成绩来。&lt;/p&gt;
    
    </summary>
    
      <category term="成长" scheme="https://chalypeng.com/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="成长" scheme="https://chalypeng.com/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于 gitignore 文件过滤无效-不能过滤某些文件问题</title>
    <link href="https://chalypeng.com/2015/02/05/about-gitignore-problem/"/>
    <id>https://chalypeng.com/2015/02/05/about-gitignore-problem/</id>
    <published>2015-02-05T02:52:16.000Z</published>
    <updated>2017-09-24T09:28:54.176Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;利用 .gitignore 过滤文件，如编译过程中的中间文件等等，这些文件不需要被追踪管理，需要被忽略掉。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;问题:&lt;/strong&gt;&lt;br&gt;在 .gitignore 中添加 FileSample 文件，以过滤该文件，但是通过 git status 查看仍显示 FileSample 文件的更改状态。&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="https://chalypeng.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://chalypeng.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>python排序高级</title>
    <link href="https://chalypeng.com/2015/01/30/python-how-to-sorting/"/>
    <id>https://chalypeng.com/2015/01/30/python-how-to-sorting/</id>
    <published>2015-01-30T02:06:37.000Z</published>
    <updated>2017-06-29T08:02:27.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Python list内置sort()方法用来排序，也可以用python内置的全局sorted()方法来对可迭代的序列排序生成新的序列。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）排序基础&lt;br&gt;简单的升序排序是非常容易的。只需要调用sorted()方法。它返回一个新的list，新的list的元素基于小于运算符(&lt;strong&gt;lt&lt;/strong&gt;)来排序。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chalypeng.com/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chalypeng.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中xrange和range区别</title>
    <link href="https://chalypeng.com/2015/01/29/diff-xrange-range/"/>
    <id>https://chalypeng.com/2015/01/29/diff-xrange-range/</id>
    <published>2015-01-29T06:41:43.000Z</published>
    <updated>2017-06-29T08:01:48.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;xrange和range区别:&lt;/strong&gt;&lt;br&gt;这两个基本上都是在循环的时候用。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xrange(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; i&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这两个输出的结果都是一样的，实际上有很多不同，&lt;code&gt;range&lt;/code&gt;会直接生成一个&lt;code&gt;list&lt;/code&gt;对象：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chalypeng.com/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chalypeng.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ORA-00904-标识符无效解决办法</title>
    <link href="https://chalypeng.com/2015/01/28/ORA-00904-%E6%A0%87%E8%AF%86%E7%AC%A6%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://chalypeng.com/2015/01/28/ORA-00904-标识符无效解决办法/</id>
    <published>2015-01-28T01:00:32.000Z</published>
    <updated>2017-06-29T08:00:47.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;出现此错误首先检查输入的字段名与数据库的表中的字段名是否一样。&lt;/strong&gt;&lt;br&gt;如果一样，就要检查下表的字段名的大小写了，如果用navicat等图形化管理工具建表时，字段名写成了小写，那么今后查询此表时就同样要用小写，但是在命令行内oracle数据库后自动将小写转换为大写再接收，所以&lt;strong&gt;需要给小写的字段名加上引号才能查询成功。&lt;/strong&gt;&lt;br&gt;C#用调用时也一样，由于oracle接收字符串都会将小写转化为大写，所以也很可能出现标识符无效的错误。&lt;br&gt;所以在建表时字段名最好都用大写，尤其当用图形化工具建表时更要注意这一点。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Database" scheme="https://chalypeng.com/categories/Database/"/>
    
    
      <category term="Oracle" scheme="https://chalypeng.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>SublimeText快捷键列表</title>
    <link href="https://chalypeng.com/2015/01/23/SublimeText-Shortcuts-Cheatsheet/"/>
    <id>https://chalypeng.com/2015/01/23/SublimeText-Shortcuts-Cheatsheet/</id>
    <published>2015-01-23T03:18:47.000Z</published>
    <updated>2018-05-31T08:57:07.665Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快捷键列表（Shortcuts-Cheatsheet）&quot;&gt;&lt;a href=&quot;#快捷键列表（Shortcuts-Cheatsheet）&quot; class=&quot;headerlink&quot; title=&quot;快捷键列表（Shortcuts Cheatsheet）&quot;&gt;&lt;/a&gt;快捷键列表（Shortcuts Cheatsheet）&lt;/h2&gt;&lt;h3 id=&quot;通用（General）&quot;&gt;&lt;a href=&quot;#通用（General）&quot; class=&quot;headerlink&quot; title=&quot;通用（General）&quot;&gt;&lt;/a&gt;通用（General）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;↑↓←→&lt;/code&gt;：上下左右移动光标，注意不是不是KJHL！&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt&lt;/code&gt;：调出菜单&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;：调出命令板（Command Palette）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl +&lt;/code&gt;：调出控制台&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Editer" scheme="https://chalypeng.com/categories/Editer/"/>
    
    
      <category term="SublimeText" scheme="https://chalypeng.com/tags/SublimeText/"/>
    
  </entry>
  
  <entry>
    <title>Python字符串格式化</title>
    <link href="https://chalypeng.com/2015/01/17/python-format-string/"/>
    <id>https://chalypeng.com/2015/01/17/python-format-string/</id>
    <published>2015-01-17T06:18:40.000Z</published>
    <updated>2017-06-29T08:01:04.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python格式操作符&quot;&gt;&lt;a href=&quot;#Python格式操作符&quot; class=&quot;headerlink&quot; title=&quot;Python格式操作符&quot;&gt;&lt;/a&gt;Python格式操作符&lt;/h2&gt;&lt;p&gt;格式操作符为真实值预留位置，并控制显示的格式。格式符可以包含有一个&lt;code&gt;类型码&lt;/code&gt;，用以控制显示类型，常见类型如下:&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://chalypeng.com/categories/Python/"/>
    
    
      <category term="Python" scheme="https://chalypeng.com/tags/Python/"/>
    
  </entry>
  
</feed>
